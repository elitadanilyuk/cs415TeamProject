/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 27 23:54:05 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.dto.WorkerDTO;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Worker_ESTest extends Worker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      worker0.setSalary(1208.5);
      assertEquals(1208.5, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("&,={DI}", linkedHashSet0, 12);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(12.0, workerDTO0.getSalary(), 0.01);
      assertEquals(0, workerDTO0.getWorkload());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("Lz5<\";");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("r.U>K$ MsKuM", linkedHashSet0, 1.0);
      double double0 = worker0.getSalary();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("F{&?x 2q3bJ<VP*", linkedHashSet0, 0.0);
      // Undeclared exception!
      try { 
        worker0.toDTO();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      int int0 = worker0.getWorkload();
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      worker0.getName();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(0.0, workerDTO0.getSalary(), 0.01);
      assertEquals(0, workerDTO0.getWorkload());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.willOverload((Project) null);
      assertFalse(boolean0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.isAvailable();
      assertTrue(boolean0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      // Undeclared exception!
      try { 
        worker0.removeProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      // Undeclared exception!
      try { 
        worker0.addProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("YC=S", linkedHashSet0, 65);
      // Undeclared exception!
      try { 
        worker0.addQualification((Qualification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      worker0.addQualification(qualification0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("&;rDp");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("&;rDp", linkedHashSet0, 0.0);
      // Undeclared exception!
      try { 
        worker0.setSalary((-230.44233652016902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      worker0.setSalary(0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.equals("edu.colostate.cs415.model.Worker:0:1:0");
      assertFalse(boolean0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("T/B/`k7mh/~");
      linkedHashSet0.add(qualification0);
      Worker worker0 = null;
      try {
        worker0 = new Worker("T/B/`k7mh/~", linkedHashSet0, (-390.50049055304277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker(",={I}", linkedHashSet0, 1.6873061594857959);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Worker worker0 = null;
      try {
        worker0 = new Worker("edu.colostate.cs415.dto.WorkerDTO", (Set<Qualification>) null, (-140.29086690126064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker("", linkedHashSet0, 92.86328309724465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker((String) null, linkedHashSet0, 690.8422933975276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      worker0.getProjects();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      boolean boolean0 = worker0.equals(worker0);
      assertTrue(boolean0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("edu.colostate.cs415.model.Worker");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      String string0 = worker0.toString();
      assertEquals(0.0, worker0.getSalary(), 0.01);
      assertEquals("edu.colostate.cs415.model.Worker:0:1:0", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      worker0.getQualifications();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F&ONO?3@#WJ!{B");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("edu.colostate.cs415.model.Worker", linkedHashSet0, 0.0);
      double double0 = worker0.getSalary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("ya6@.fB|2");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("ya6@.fB|2", linkedHashSet0, 0.0);
      worker0.hashCode();
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }
}
