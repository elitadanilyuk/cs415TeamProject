/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 27 23:57:18 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.model.Company;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Company_ESTest extends Company_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Company company0 = new Company(",");
      Set<Worker> set0 = company0.getUnassignedWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Company company0 = new Company(",Jw");
      company0.createQualification(",Jw");
      Set<Qualification> set0 = company0.getQualifications();
      company0.createWorker(":", set0, 1618.93);
      Set<Worker> set1 = company0.getEmployedWorkers();
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Company company0 = new Company(",Jw");
      company0.createQualification(",Jw");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker(":", set0, 1618.93);
      Set<Worker> set1 = company0.getAvailableWorkers();
      assertTrue(set1.contains(worker0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Company company0 = new Company(",");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = company0.createQualification(",");
      linkedHashSet0.add(qualification0);
      Worker worker0 = company0.createWorker("`gsveJ$3{AB@ep", linkedHashSet0, 0.0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Company company0 = new Company(",Jw");
      company0.createQualification(",Jw");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = new Worker(",Jw", set0, 1618.93);
      // Undeclared exception!
      try { 
        company0.unassignAll(worker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Company company0 = new Company(",J_b");
      company0.createQualification(",J_b");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("8", set0, 1618.93);
      company0.unassignAll(worker0);
      assertEquals(",J_b", company0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Company company0 = new Company("2b/bxgbC-/@");
      // Undeclared exception!
      try { 
        company0.unassignAll((Worker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Company company0 = new Company(",J_b");
      company0.createQualification(",J_b");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("8", set0, 1618.93);
      // Undeclared exception!
      try { 
        company0.unassign(worker0, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Company company0 = new Company("1`L-");
      // Undeclared exception!
      try { 
        company0.unassign((Worker) null, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Company company0 = new Company(",Jw");
      company0.createQualification(",Jw");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker(",Jw", set0, 1618.93);
      // Undeclared exception!
      try { 
        company0.assign(worker0, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Company company0 = new Company("aaHYw");
      // Undeclared exception!
      try { 
        company0.assign((Worker) null, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Company company0 = new Company("eduTcolostat.cs415.dto.WorkerDTO");
      // Undeclared exception!
      try { 
        company0.finish((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Company company0 = new Company(", salary='");
      // Undeclared exception!
      try { 
        company0.start((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       Company company0 = new Company("YxR$+!34@lLtJ;");
//       LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
//       ProjectSize projectSize0 = ProjectSize.BIG;
//       // Undeclared exception!
//       try { 
//         company0.createProject(":", linkedHashSet0, projectSize0);
//         fail("Expecting exception: NoClassDefFoundError");
      
//       } catch(NoClassDefFoundError e) {
//          //
//          // spark/utils/StringUtils
//          //
//          verifyException("edu.colostate.cs415.model.Company", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Company company0 = new Company("eduTcolostat.cs415.dto.WorkerDTO");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = company0.createProject("", linkedHashSet0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Company company0 = new Company("aaHYw");
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = company0.createProject("?", (Set<Qualification>) null, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Company company0 = new Company("aaHYw");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Project project0 = company0.createProject("FINISHED", linkedHashSet0, (ProjectSize) null);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Company company0 = new Company("\"){(uMQH|O");
      Set<Qualification> set0 = company0.getQualifications();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = company0.createProject((String) null, set0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Company company0 = new Company("YxR$+!34@lLtJ;");
      company0.createQualification("YxR$+!34@lLtJ;");
      Qualification qualification0 = company0.createQualification("YxR$+!34@lLtJ;");
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Company company0 = new Company(",");
      Qualification qualification0 = company0.createQualification("");
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Company company0 = new Company("VF.U\"i");
      Qualification qualification0 = company0.createQualification((String) null);
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Company company0 = new Company("aaHYw");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = company0.createWorker("FINISHED", linkedHashSet0, 0.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Company company0 = new Company(",");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = company0.createWorker(",", linkedHashSet0, 0.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Company company0 = new Company(";A#A@rd*oZe@CA9T");
      Worker worker0 = company0.createWorker("tv[u2-6D", (Set<Qualification>) null, 0.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Company company0 = new Company("2b/bxgbC-/@");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = company0.createWorker("2b/bxgbC-/@", linkedHashSet0, (-1.0));
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Company company0 = new Company("eduTcolostat.cs415.dto.WorkerDTO");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = company0.createWorker("", linkedHashSet0, (-1.0));
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Company company0 = new Company("f37uF^\"*I]:a=k");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker((String) null, set0, 2003.3664704348162);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Company company0 = new Company(",J_b");
      company0.createQualification(",J_b");
      Set<Qualification> set0 = company0.getQualifications();
      company0.createWorker("8", set0, 1618.93);
      Set<Worker> set1 = company0.getUnassignedWorkers();
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Company company0 = new Company(",J_b");
      boolean boolean0 = company0.equals(company0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Company company0 = new Company(",Jw");
      boolean boolean0 = company0.equals(12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Company company0 = new Company("VF.U\"i");
      boolean boolean0 = company0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Company company0 = new Company(",Jw");
      Set<Worker> set0 = company0.getAvailableWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Company company0 = new Company(",Jw");
      Set<Worker> set0 = company0.getUnavailableWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Company company0 = new Company(";A#A@rd*oZe@CA9T");
      Set<Project> set0 = company0.getProjects();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Company company0 = new Company(",Jw");
      Set<Worker> set0 = company0.getAssignedWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Company company0 = new Company("\"){(uMQH|O");
      company0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Company company0 = new Company("MEDIUM");
      String string0 = company0.toString();
      assertEquals("MEDIUM:0:0", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Company company0 = new Company(",J_b");
      Set<Worker> set0 = company0.getEmployedWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Company company0 = new Company(",Jw");
      String string0 = company0.getName();
      assertEquals(",Jw", string0);
  }
}
